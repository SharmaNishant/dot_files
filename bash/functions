#!/bin/bash
# this file contains black magic
#
# Author: Nishant Sharma <'nishants1994' at gmail>


################################################################################
#                       SYSTEM UPDATE                                          #
################################################################################
nsysup () {
	sudo apt-get clean
	sudo apt update
	sudo apt upgrade --assume-yes
	sudo apt-get dist-upgrade --assume-yes
	sudo apt-get autoremove --assume-yes --purge
}

################################################################################
#                       TERMINAL UTILITIES                                     #
################################################################################
swps1 () {
    if [ "$1" == "r" ]
    then
        export PS1="> \$(get_time) \[\033[32m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\] $ "
    elif [ "$1" == "s" ]
    then
        export PS1="> \[\033[32m\]\W\[\033[33m\]\[\033[00m\] $ "
    elif [ "$1" == "m" ]
    then
        export PS1="> $ "
    else
        export PS1="\[\033[32m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\]\n> $ "
   fi
}



ctrl_p () {
    local file_name
    file_name=$(fzf) && echo "vim ${file_name}" | writecmd
}
bind -x '"\C-p": ctrl_p;'


kill_ros () {
    for b in $(pgrep ros)
    do
        kill -9 "$b"
    done
}


add_ssh () {
    eval "$(ssh-agent)"
    ssh-add ~/.ssh/id_rsa
}


websearch () {
	local query=""
	for var in "$@"
	do
    		query=$query"${var}+"
	done
	elinks "https://www.google.com/search?q=${query}"
}


download () {
    # If only one argument was passed, use it as the download link
    if (( $# == 1 )); then
        echo aria2c -x 8 -s 8 "$1"
        aria2c -x 8 -s 8 "$1"
    fi
    # if two arguments were passed, use the second argument as filename
    if (( $# > 1 )); then
        echo aria2c -x 8 -s 8 "$1" --out="$2"
        aria2c -x 8 -s 8 "$1" --out="$2"
    fi
}

writecmd ()
{
    perl -e '$TIOCSTI = 0x5412; $l = <STDIN>; $lc = $ARGV[0] eq "-run" ? "\n" : ""; $l =~ s/\s*$/$lc/; map { ioctl STDOUT, $TIOCSTI, $_; } split "", $l;' -- "$1"
}

strip_jpg_info ()
{
    exiftool -all= *.jpg
}

################################################################################
#                            GIT RELATED                                       #
################################################################################

fbr () {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout "$(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")"
}
bind -x '"\eb": fbr;'

fetch_local_branch () {
  local branches branch
  branches=$(git branch | cut -c 3-) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout "$(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")"
}
bind -x '"\es": fetch_local_branch;'

gbd () {
  local branches branch
  branches=$(git branch | cut -c 3-) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git branch -d "$(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")"
}

gbD () {
  local branches branch
  branches=$(git branch | cut -c 3-) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git branch -D "$(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")"
}

bfd () {
    gdt "$(git merge-base --fork-point origin/develop-stable)"
}

gr () {
  cd "$(git rev-parse --show-toplevel)" || return
}

################################################################################
#                         SEARCH AND OPEN FILES                                #
################################################################################
org ()
{
    IFS=$'\n'
    local file
    local line
    local search_result
    search_result=($(rg -in --no-heading --color=always "$@"))
    select search_item in "${search_result[@]}"
    do
        # strip color out of output
        search_item="$(echo "$search_item" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g")"
        file="$(echo "$search_item" | cut -d: -f1)"
        line="$(echo "$search_item" | cut -d: -f2)"
        nvim "+$line" "$file"
        break
    done
    # unset IFS for regular bash usage
    unset IFS
}


srg ()
{
    IFS=$'\n'
    local file
    local line
    local search_result
    search_result=($(rg -in --no-heading --color=always "$@"))
    select search_item in "${search_result[@]}"
    do
        # strip color out of output
        search_item="$(echo "$search_item" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g")"
        file="$(echo "$search_item" | cut -d: -f1)"
        line="$(echo "$search_item" | cut -d: -f2)"
        subl "$file":"$line"
        break
    done
    # unset IFS for regular bash usage
    unset IFS
}


################################################################################
#                         FFMPEG UTILS                                         #
################################################################################

convert_to_gif ()
{
    ffmpeg -i "$1" -vf "split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" -loop 0 "$2"
}   # ----------  end of function convert_to_gif  ----------


convert_to_mp4 ()
{
    ffmpeg -i "$1" -vcodec libx264 -crf 20 -acodec copy "$2"
}

################################################################################
#                          PDF Utilities                                       #
################################################################################

# input file pattern and output file name
make_pdf_current_folder ()
{
    for b in `ls -1 $1`; do  echo $b; convert "$b" "$b".pdf; done
    pdftk $1.pdf cat output "$2"
}

################################################################################
#                          SCREEN RECORD UTILITIES                             #
################################################################################

## FORMAT: SIZE(x,y) SCREEN OFFSET(x,y)
get_area_drawn_rectangle ()
{
    imed="$(mktemp -u -p /dev/shm)".png &&\
    import "$imed" &>/dev/null &&\
    #extract pixel dimensions form file
    size_x="$(identify "$imed" | awk -F' ' '{print $3}' | awk -F'x' '{print $1}')" &&\
    size_y="$(identify "$imed" | awk -F' ' '{print $3}' | awk -F'x' '{print $2}')" &&\
    pos_x="$(identify "$imed" | awk -F'+' '{print $2}')" &&\
    pos_y="$(identify "$imed" | awk -F'+' '{print $3}' | awk '{print $1}')" &&\
    #and remove it
    rm -f "$imed" &&\
    echo "${size_x}" "${size_y}" "${pos_x}" "${pos_y}"
#    echo "1016 624 4099 100"
}

record_gif ()
{
    get_rect=($(get_area_drawn_rectangle))
    temp_ogv="$(mktemp -u -p /dev/shm)".ogv
    recordmydesktop -o "${temp_ogv}" --fps 20 --no-sound -x "${get_rect[2]}" \
        -y "${get_rect[3]}" --width "${get_rect[0]}" --height "${get_rect[1]}" \
        --channels 1 --freq 22050 --v_quality 63 --workdir '/dev/shm/' \
        --stop-shortcut Mod4+s
    convert_to_gif "${temp_ogv}" "$1"
}

record_mp4 ()
{
    get_rect=($(get_area_drawn_rectangle))
    temp_ogv="$(mktemp -u -p /dev/shm)".ogv
    recordmydesktop -o "${temp_ogv}" --fps 20 --no-sound -x "${get_rect[2]}" \
        -y "${get_rect[3]}" --width "${get_rect[0]}" --height "${get_rect[1]}" \
        --channels 1 --freq 22050 --v_quality 63 --workdir '/dev/shm/' \
        --stop-shortcut Mod4+s
    convert_to_mp4 "${temp_ogv}" "$1"
}


################################################################################
#                          YOUTUBE DL UTILITIES                                #
################################################################################

download_channel_mp3() {
    youtube-dl -f "bestaudio/best" -ciw -o "%(title)s.%(ext)s" -v --extract-audio --audio-quality 0 --audio-format mp3 "${1}"
}

################################################################################
#                         DOCKER                                               #
################################################################################

plex_update() {
    dcd
    dcp
    dcb
    dcud
}

################################################################################
#                         BACKUPS                                              #
################################################################################

backup_nextcloud_on_sheru () {
    sudo rsync -rlthvP --info=progress2 --no-inc-recursive --delete-after --exclude '*appdata_ocx404u2sj5p/preview*' /home/ubuntu/nextcloud/ /home/ubuntu/backups/nextcloud/
}

backup_nextcloud_from_sheru () {
    if [ -z "$1" ]
        then
            echo "Please pass a directory where the backup should be done"
        else
            rsync -e 'ssh' -rlthvP --info=progress2  --no-inc-recursive --delete-after sheru:/home/ubuntu/backups/nextcloud/ "$1"
    fi
}

backup_plex_on_home () {
    rsync -avh --info=progress2 --no-inc-recursive --delete-after ~/plex/ /media/data/plex/
}

backup_plex_from_sheru () {
    if [ -z "$1" ]
    then
        echo "Please pass a directory where the backup should be done"
    else
        rsync -e 'ssh' -ahv --info=progress2 --no-inc-recursive --delete-after sheru:plex/ "$1"
    fi
}


